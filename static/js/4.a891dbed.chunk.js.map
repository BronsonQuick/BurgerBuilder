{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","props","useState","elementType","elementConfig","type","placeholder","value","constrolsState","setControlsState","signup","setSignup","authRedirect","to","formElementsArray","key","push","id","config","errorMessage","message","form","className","styles","Auth","onSubmit","event","preventDefault","map","formElement","changed","controlName","updatedControls","target","inputChangedHandler","btnType","clicked","Fragment","input","inputElement","InputElement","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.a891dbed.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\"};","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport styles from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { Redirect } from 'react-router-dom';\n\nfunction Auth(props) {\n\tconst [ constrolsState, setControlsState ] = useState({\n\t\t\temail: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tplaceholder: 'Your email address'\n\t\t\t\t},\n\t\t\t\tvalue: ''\n\t\t\t},\n\t\t\tpassword: {\n\t\t\t\telementType: 'input',\n\t\t\t\telementConfig: {\n\t\t\t\t\ttype: 'password',\n\t\t\t\t\tplaceholder: 'Your password'\n\t\t\t\t},\n\t\t\t\tvalue: ''\n\t\t\t}\n\t});\n\tconst [signup, setSignup ] = useState(false);\n\tif ( !props.buildingBurger && props.authRedirectPath !== '/' ) {\n\t\tprops.onSetAuthRedirectPath();\n\t}\n\tconst inputChangedHandler = (event, controlName) => {\n\t\tconst updatedControls = {\n\t\t\t...constrolsState,\n\t\t\t[controlName]: {\n\t\t\t\t...constrolsState[controlName],\n\t\t\t\tvalue: event.target.value\n\t\t\t}\n\t\t};\n\t\tsetControlsState(updatedControls);\n\t}\n\tconst submitHandler = (event) => {\n\t\tevent.preventDefault();\n\t\tprops.onAuth(constrolsState.email.value, constrolsState.password.value, constrolsState.isSignUp );\n\t}\n\tconst switchAuthModeHandler = () => {\n\t\tsetSignup(!signup);\n\t}\n\tlet authRedirect = null;\n\tif ( props.isAuthenticated ) {\n\t\tauthRedirect = <Redirect to={props.authRedirectPath} />;\n\t}\n\tconst formElementsArray = [];\n\tfor ( let key in constrolsState ) {\n\t\tformElementsArray.push({\n\t\t\tid: key,\n\t\t\tconfig: constrolsState[key]\n\t\t});\n\t}\n\tlet errorMessage = null;\n\n\tif ( props.error ) {\n\t\terrorMessage = (\n\t\t\t<p>{props.error.message}</p>\n\t\t);\n\t}\n\tlet form = (\n\t\t<div className={styles.Auth}>\n\t\t\t{authRedirect}\n\t\t\t{ errorMessage }\n\t\t\t<form onSubmit={submitHandler}>\n\t\t\t\t{formElementsArray.map( formElement => (\n\t\t\t\t\t<Input\n\t\t\t\t\t\tkey={formElement.id}\n\t\t\t\t\t\telementType={formElement.config.elementType}\n\t\t\t\t\t\telementConfig={formElement.config.elementConfig}\n\t\t\t\t\t\tvalue={formElement.config.value}\n\t\t\t\t\t\tchanged={(event) => inputChangedHandler(event, formElement.id)} />\n\t\t\t\t))}\n\t\t\t\t<Button btnType=\"Success\">Login</Button>\n\t\t\t</form>\n\t\t\t<Button\n\t\t\t\tbtnType=\"Danger\"\n\t\t\t\tclicked={switchAuthModeHandler}>\n\t\t\t\tSwitch to {signup ? 'Sign In': 'Sign Up'}\n\t\t\t</Button>\n\t\t</div>\n\t);\n\tif ( props.loading ) {\n\t\tform = <Spinner />;\n\t}\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{form}\n\t\t</React.Fragment>\n\t);\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tloading: state.auth.loading,\n\t\terror: state.auth.error,\n\t\tisAuthenticated: state.auth.token !== null,\n\t\tbuildingBurger: state.burgerBuilder.building,\n\t\tauthRedirectPath: state.auth.authRedirectPath\n\t}\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonAuth: (email, password, isSignUp ) => dispatch(actions.auth(email, password, isSignUp)),\n\t\tonSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n\t}\n};\nexport default connect( mapStateToProps, mapDispatchToProps)(Auth);\n","import React from 'react';\nimport styles from './Input.module.css';\n\nconst input = (props) => {\n\tlet inputElement = null;\n\n\tswitch ( props.elementType ) {\n\t\tcase ('input'):\n\t\t\tinputElement = <input\n\t\t\t\tclassName={styles.InputElement}\n\t\t\t\t{...props.elementConfig}\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={props.changed} />;\n\t\t\tbreak;\n\t\tcase ('textarea'):\n\t\t\tinputElement = <textarea\n\t\t\t\tclassName={styles.InputElement}\n\t\t\t\t{...props.elementConfig}\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={props.changed} />;\n\t\t\tbreak;\n\t\tcase ('select'):\n\t\t\tinputElement = ( <select\n\t\t\t\tclassName={styles.InputElement}\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={props.changed} >\n\t\t\t\t{props.elementConfig.options.map(option => (\n\t\t\t\t\t<option value={option.value} key={option.value}>{option.displayValue}</option>\n\t\t\t\t) ) }\n\t\t\t\t</select>);\n\t\t\t\tbreak;\n\t\tdefault:\n\t\t\tinputElement = <input\n\t\t\t\tclassName={styles.InputElement}\n\t\t\t\t{...props.elementConfig}\n\t\t\t\tvalue={props.value}\n\t\t\t\tonChange={props.changed} />;\n\t}\n\treturn (\n\t\t<div className={styles.Input}>\n\t\t\t<label className={styles.Label}>{props.label}</label>\n\t\t\t{inputElement}\n\t\t</div>\n\t);\n}\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\"};"],"sourceRoot":""}